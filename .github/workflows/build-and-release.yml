name: Build and Release

on:
  schedule:
    - cron: '0 0 * * *'

  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty for auto date-based version)'
        required: false
        type: string

  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    environment: npm-publish

    env:
      GO_VERSION: '1.24.0'
      NODE_VERSION: '20.x'

    steps:
      - name: Generate version number
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION="${GITHUB_REF#refs/tags/v}"
          elif [[ -n "${{ inputs.version }}" ]]; then
            # Use manually provided version from workflow_dispatch
            VERSION="${{ inputs.version }}"
          else
            # Default: use date-based version
            VERSION=$(date +'%Y.%-m.%-d')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Checkout npm package repository
        uses: actions/checkout@v4
        with:
          path: npm-package

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: https://registry.npmjs.org/
          scope: '@rxliuli'

      - name: Install hereby
        run: npm install -g hereby

      - name: Checkout TypeScript-Go repository
        uses: actions/checkout@v4
        with:
          repository: microsoft/typescript-go
          path: typescript-go
          submodules: 'recursive'

      - name: Install dependencies (TypeScript-Go)
        working-directory: ./typescript-go
        run: npm ci

      - name: Build TypeScript-Go
        working-directory: ./typescript-go
        run: |
          hereby build
          ls -la built/local

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          install-only: true

      - name: Create temporary .goreleaser.yml
        working-directory: ./typescript-go
        run: |
          cat > .goreleaser.yml << EOF
          builds:
            - id: tsgo
              binary: tsgo
              main: ./cmd/tsgo
              ldflags:
                - -s -w -X main.version=${{ steps.version.outputs.version }}
              env:
                - CGO_ENABLED=0
              goos:
                - linux
                - windows
                - darwin
                - freebsd
              goarch:
                - amd64
                # - 386
                - arm64
                # - arm
              # ignore:
              #   - goos: darwin
              #     goarch: 386
              #   - goos: darwin
              #     goarch: arm
              #   - goos: windows
              #     goarch: arm64
              #   - goos: windows
              #     goarch: arm
          EOF

      - name: Build binaries
        working-directory: ./typescript-go
        run: |
          goreleaser build --snapshot --clean
          find dist -type f | sort

      - name: Rename binaries for clarity
        run: |
          mkdir -p ./release-artifacts

          cp ./typescript-go/dist/tsgo_linux_amd64_v1/tsgo ./release-artifacts/tsgo-linux-amd64
          # cp ./typescript-go/dist/tsgo_linux_386_v1/tsgo ./release-artifacts/tsgo-linux-386
          cp ./typescript-go/dist/tsgo_linux_arm64/tsgo ./release-artifacts/tsgo-linux-arm64
          # cp ./typescript-go/dist/tsgo_linux_arm_v7/tsgo ./release-artifacts/tsgo-linux-arm

          cp ./typescript-go/dist/tsgo_windows_amd64_v1/tsgo.exe ./release-artifacts/tsgo-windows-amd64.exe
          cp ./typescript-go/dist/tsgo_windows_arm64/tsgo.exe ./release-artifacts/tsgo-windows-arm64.exe
          # cp ./typescript-go/dist/tsgo_windows_386_v1/tsgo.exe ./release-artifacts/tsgo-windows-386.exe

          cp ./typescript-go/dist/tsgo_darwin_amd64_v1/tsgo ./release-artifacts/tsgo-darwin-amd64
          cp ./typescript-go/dist/tsgo_darwin_arm64/tsgo ./release-artifacts/tsgo-darwin-arm64

          cp ./typescript-go/dist/tsgo_freebsd_amd64_v1/tsgo ./release-artifacts/tsgo-freebsd-amd64
          cp ./typescript-go/dist/tsgo_freebsd_arm64/tsgo ./release-artifacts/tsgo-freebsd-arm64

          ls -la ./release-artifacts/

      - name: Find TypeScript declaration files
        working-directory: ./typescript-go
        run: |
          find ./built/local/ -name "*.d.ts" | sort

      - name: Copy TypeScript declaration files to npm package
        run: |
          mkdir -p npm-package/bin

          find ./typescript-go/built/local/ -name "*.d.ts" -exec cp {} ./npm-package/bin/ \;
          echo "Copied declaration files to npm-package/bin:"
          ls -la ./npm-package/bin/

      - name: Update package.json version
        working-directory: ./npm-package
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
          fi

      - name: Determine tag name
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # Tag already exists, use it
            TAG="${GITHUB_REF#refs/tags/}"
          else
            # Create a new tag
            TAG="v${{ steps.version.outputs.version }}"
          fi
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            TypeScript-Go build for ${{ steps.version.outputs.version }}

            This release contains the latest build of TypeScript-Go with binary executables for multiple platforms.
          draft: false
          prerelease: false
          files: ./release-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to npm
        working-directory: ./npm-package
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
